model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
source("./lib/feature.R")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zipcode",
export=TRUE))
}
if(!require("EBimage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
library(EBimage)
library("EBimage")
biocLite("EBImage")
library("EBimage")
library(EBimage)
library("EBImage")
setwd("./ads_spr2017_proj3")
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zipcode",
export=TRUE))
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(depth_values), 2))
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(depth_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
library("EBImage")
library("gbm")
experiment_dir <- "../data/zipcode/" # This will be modified for different data sets.
img_train_dir <- paste(experiment_dir, "train/", sep="")
img_test_dir <- paste(experiment_dir, "test/", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels = paste("GBM with depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep=""),
header=F)
label_train <- as.numeric(unlist(label_train) == "9")
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir,
"train",
data_name="zip",
export=TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir,
"test",
data_name="zip",
export=TRUE))
}
#save(dat_train, file="./output/feature_train.RData")
#save(dat_test, file="./output/feature_test.RData")
source("../lib/train.R")
source("../lib/test.R")
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
source("../lib/cross_validation.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(dat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv.RData")
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2],depth_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.15))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
if(run.cv){
load("../output/err_cv.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab="Interaction Depth", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.25))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
#dev.off()
}
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(par=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
View(err_cv)
which.min(err_cv[,1])
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
fit_train <- train(dat_train, label_train, par_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par=par_best))
par_best$par
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
source('~/Dropbox/Tian_Teaching/G5243-ADS/0-Projects-startercodes/3-Spring2017/Project3_PoodleKFC/lib/train.R')
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(depth=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(dat_train, label_train, par_best))
save(fit_train, file="../output/fit_train.RData")
tm_test=NA
if(run.test){
load(file=paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file="../output/fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file="../output/pred_test.RData")
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
knitr::opts_chunk$set(echo = TRUE)
# use relative path for reproducibility
set.seed(2019)
setwd("C:\Users\zengy\Documents\GitHub\Spring2019-Proj3-spring2019-proj3-grp11")
# use relative path for reproducibility
set.seed(2019)
setwd("C:/Users/zengy/Documents/GitHub/Spring2019-Proj3-spring2019-proj3-grp11")
# here replace it with own file path
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
run.train=TRUE # run training set
？xgboost
?xgboost
??xgboost
seq(1, 5, 2)
knitr::opts_chunk$set(echo = TRUE)
model_values <- seq(1, 5, 2)
model_labels = paste("xGBM with depth =", model_values)
model_labels
model_values <- seq(1, 5, 2)
model_labels = paste("xGBM with depth =", model_values)
model_labels
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
train_LR_dir
source("../lib/feature_new.R") #using feature_new
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
source("../lib/feature_new.R") #using feature_new
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
save(dat_train, file="../output/feature_train.RData")
label_train
##### test with different nrounds #####
model_values <- seq(200, 350, 50)
model_labels = paste("XGBoost with nrounds =", model_values)
model_labels
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
# use relative path for reproducibility
set.seed(2019)
setwd("C:/Users/zengy/Documents/GitHub/Spring2019-Proj3-spring2019-proj3-grp11")
# here replace it with own file path
train_dir <- "../data/train_set/"
train_LR_dir <- paste(train_dir, "LR/", sep="")
train_HR_dir <- paste(train_dir, "HR/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
run.train=TRUE # run training set
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature_new.R") #using feature_new
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
save(dat_train, file="../output/feature_train.RData")
source("../lib/train.xgboost.R")
source("../lib/test.xgboost.R")
source("../lib/cross_validation_xgboost.R")
if(run.cv){
err_cv <- array(dim=c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(feat_train, label_train, model_values[k], K)
}
save(err_cv, file="../output/err_cv_xgboost.RData")
}
if(run.cv){
load("../output/err_cv_xgboost.RData")
plot(model_values, err_cv[,1], xlab="Iterations", ylab="CV Error",
main="Cross Validation Error", type="n", ylim=c(0, 0.25))
points(model_values, err_cv[,1], col="blue", pch=16)
lines(model_values, err_cv[,1], col="blue")
arrows(model_values, err_cv[,1]-err_cv[,2], model_values, err_cv[,1]+err_cv[,2],
length=0.1, angle=90, code=3)
}
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(iter=model_best)
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(iter=model_best)
model_values
#choose the best hyperparameters for the model
model_best=model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[,1])]
}
par_best <- list(iter=model_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
save(fit_train, file="../output/fit_train_xgboost.RData")
train(feat_train, label_train, par_best)
source("../lib/superResolution_new.R") #using superresolution_new
test_dir <- "../data/test_set/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train_xgboost.RData")
tm_test <- system.time(superResolution(test_LR_dir, test_HR_dir, fit_train))
}
##### test with different nrounds #####
model_values <- array(NA, dim=c(2, 6))
model_values[1, ]<- rep(c(1,3,5), 2)
model_values[2, ]<- rep(c(5,10), 3)
model_values
##### test with different nrounds #####
model_values <- array(NA, dim=c(2, 6))
model_values[1, ]<- rep(c(1,3,5), 2)
model_values[2, ]<- rep(c(5,10), 3)
t(model_values)
##### test with different nrounds #####
model_values <- array(NA, dim=c(2, 6))
model_values[1, ]<- rep(c(1,3,5), 2)
model_values[2, ]<- rep(c(5,10), 3)
model_values_show = t(model_values)
colname(model_values_show) = c("max_depth","nrounds")
##### test with different nrounds #####
model_values <- array(NA, dim=c(2, 6))
model_values[1, ]<- rep(c(1,3,5), 2)
model_values[2, ]<- rep(c(5,10), 3)
model_values_show = t(model_values)
colnames(model_values_show) = c("max_depth","nrounds")
model_values_show
source("../lib/train.xgboost.R")
source("../lib/test.xgboost.R")
model_values[,k]
model_values[,1]
model_values[,2]
model_values[1,1]
model_values[1,2]
model_values[2,1]
model_values[1,1]
model_values
colSums(model_values)
dim(model_values)
dim(model_values)[2]
model_values[1,]
err_cv
extra_label <- read.csv(train_label_path, colClasses=c("NULL", NA, NA))
source("../lib/feature_new.R") #using feature_new
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(train_LR_dir, train_HR_dir))
feat_train <- dat_train$feature
label_train <- dat_train$label
}
save(dat_train, file="../output/feature_train.RData")
source("../lib/train.xgboost.R")
source("../lib/test.xgboost.R")
source("../lib/cross_validation_xgboost.R")
if(run.cv){
err_cv <- array(dim=c(dim(model_values)[2], 2))
for(k in 1:dim(model_values)[2]){
cat("k=", k, "\n")
cat("max_depth=", model_values[1,k], "\n")
cat("nrounds=", model_values[2,k], "\n")
err_cv[k,] <- cv.function(feat_train, label_train, model_values[1,k], model_values[2,k], K)
print(err_cv[k,])
}
save(err_cv, file="../output/err_cv_xgboost.RData")
}
source("../lib/cross_validation_xgboost.R")
if(run.cv){
err_cv <- array(dim=c(dim(model_values)[2], 2))
for(k in 1:dim(model_values)[2]){
cat("k=", k, "\n")
cat("max_depth=", model_values[1,k], "\n")
cat("nrounds=", model_values[2,k], "\n")
err_cv[k,] <- cv.function(feat_train, label_train, model_values[1,k], model_values[2,k], K)
print(err_cv[k,])
}
save(err_cv, file="../output/err_cv_xgboost.RData")
}
source("../lib/train.xgboost.R")
source("../lib/test.xgboost.R")
source("../lib/cross_validation_xgboost.R")
if(run.cv){
err_cv <- array(dim=c(dim(model_values)[2], 2))
for(k in 1:dim(model_values)[2]){
cat("k=", k, "\n")
cat("max_depth=", model_values[1,k], "\n")
cat("nrounds=", model_values[2,k], "\n")
err_cv[k,] <- cv.function(feat_train, label_train, model_values[1,k], model_values[2,k], K)
print(err_cv[k,])
}
save(err_cv, file="../output/err_cv_xgboost.RData")
}
err_cv
model_values[which.min(err_cv[,1])]
model_values[which.min(err_cv[,2])]
err_cv
which.min(err_cv[,1])
model_values[,which.min(err_cv[,1])]
#choose the best hyperparameters for the model
model_best=model_values[1]
if(run.cv){
dp_best <- model_values[,which.min(err_cv[,1])][1]
nr_best <- model_values[,which.min(err_cv[,1])][2]
}
par_best <- list(dp = dp_best, nr = nr_best)
tm_train=NA
tm_train <- system.time(fit_train <- train(feat_train, label_train, par_best))
save(fit_train, file="../output/fit_train_xgboost.RData")
